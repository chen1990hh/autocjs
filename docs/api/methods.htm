<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width">
    <meta name="author" content="Robert Yao - yaohaixiao.com">
    <meta name="keyword" content="AutocJS,jQuery,jQuery Plugin">
    <meta name="description" content="AutocJS: Automatically create directory navigation for your article.">
    <!-- Mobile Specific Meta -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <title>Methods - AutocJS</title>
    <link href="../asset/normalize/normalize.css" type="text/css" rel="stylesheet" media="all">
    <link href="../css/api.css" type="text/css" rel="stylesheet">
    <link href="../css/autoc.css" type="text/css" rel="stylesheet">
</head>
<body>
<div class="api-header">
    <h1 class="api-project">AutocJS</h1>
    <ul class="api-navigation">
        <li><a href="../index.htm">Home</a></li>
        <li class="api-active"><a href="index.htm">API Documentation</a></li>
        <li><a href="../examples/index.htm">Examples</a></li>
        <li><a href="https://github.com/yaohaixiao/AutocJS/archive/master.zip">Download</a></li>
    </ul>
</div>
<div class="api-wrap" id="methods">
    <h1 class="api-subject">Methods</h1>
    <div class="api-container" id="container">
        <div class="api-content init" id="init">
            <h2>init( options )</h2>
            <p><strong>init( options )</strong> 是 AutocJS 的初始化方法：</p>
            <ol>
                <li>初始化配置参数；</li>
                <li>初始化 DOM 节点和数据信息；</li>
                <li>绘制 UI 界面；</li>
                <li>给 AutocJS 相关的 DOM 节点绑定事件处理器；</li>
            </ol>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>options</dt>
                <dd>{Object} - （可选）初始化的配置参数，详见 <a href="options.htm">Configuration Options</a>。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleOutline = new AutocJS();

ArticleOutline.init({
    article: '#article',
    title: 'AutocJS v0.2.0'
});</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content initProps" id="initProps">
            <h2>initProps( )</h2>
            <p><strong>initProps( )</strong> 是 AutocJS 的属性初始化方法：</p>
            <ol>
                <li>初始化 attributes 配置参数属性；</li>
                <li>初始化 elements （DOM 节点）属性；</li>
                <li>初始化 data （数据）属性；</li>
            </ol>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content reload" id="reload">
            <h2>reload( options )</h2>
            <p><strong>reload( options )</strong> 是（根据新的配置信息）重启程序方法：</p>
            <ol>
            <li>先移除所有绘制的 DOM 结合和绑定的事件处理器；</li>
            <li>重新初始化程序；</li>
            </ol>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>options</dt>
                <dd>{Object} - （可选）初始化的配置参数，详见 <a href="options.htm">Configuration Options</a>。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleTOC = new AutocJS({
    isAnchorsOnly: false
});

ArticleTOC.reload({
    title: 'Reload AutocJS',
    isAnchorsOnly: true
});</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content set" id="set">
            <h2>set( options )</h2>
            <p><strong>set( options )</strong> 用来设置 attributes（配置）属性。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>config</dt>
                <dd>{Object} - （可选）初始化的配置参数，详见 <a href="options.htm">Configuration Options</a>。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>new AutocJS().set({
     article: '#article',
     title: 'AutocJS v0.2.0'
}).init();</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content get" id="get">
            <h2>get( prop )</h2>
            <p><strong>get( prop )</strong> 方法返回某个 attributes 属性。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>prop</dt>
                <dd>{String} - 想要获取的 attributes 属性名称。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>attributes 中对应的属性</dt>
                <dd>{Any} - attributes 属性值。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleTOC = new AutocJS({
     article: '#article',
     title: 'AutocJS v0.2.0'
});

ArticleTOC.get('title'); // -> 'AutocJS v0.2.0'</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content headings" id="headings">
            <h2>headings( data )</h2>
            <p><strong>headings( data )</strong> 方法返回或者设置 data.headings （标题 DOM 节点集合）数据。传入 data 参数，则用来设置 data.headings 数据，没有传入，则获取 data.headings 数据。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Array} - （可选）标题 DOM 节点集合。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS | data.headings</dt>
                <dd>{Object|Array} - 传入 data 参数，则为 AutocJS 对象，没有则为 data.headings 数据。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleTOC = new AutocJS({
     article: '#article',
     title: 'AutocJS v0.2.0'
});

ArticleTOC.anchors() // -> data.headings
ArticleTOC.anchors([TitleNode,..,TitleNode]); // -> AutocJS</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content chapters" id="chapters">
            <h2>chapters( data )</h2>
            <p><strong>chapters( data )</strong> 方法返回或者设置 data.chapters （文章段落章节数据集合）数据。传入 data 参数，用来设置 data.chapters 数据，没有传入参数，则获取 data.chapters 数据。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Array} - （可选）文章段落章节数据集合。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS | data.chapters</dt>
                <dd>{Object|Array} - 传入 data 参数，则为 AutocJS 对象，没有则为 data.chapters 数据。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleTOC = new AutocJS({
     article: '#article',
     title: 'AutocJS v0.2.0'
});

ArticleTOC.chapters(); // -> data.chapters
ArticleTOC.chapters([{
    id: 0,
    level: 1,
    pid : -1,
    tag: "H1",
    text : "Methods",
    value : "anchor-0",
},
...,
{
    id: n,
    level: 4,
    pid : 0,
    tag: "H4",
    text : "A title",
    value : "anchor-n",
}]); // -> AutocJS</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content anchors" id="anchors">
            <h2>anchors( data )</h2>
            <p><strong>anchors( data )</strong> 方法返回或者设置 data.anchors （标题 DOM 节点集合）数据。传入 data 参数，用来设置 data.anchors 数据，没有传入参数，则获取 data.anchors 数据。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Array} - （可选）标题 DOM 节点集合。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS | data.anchors</dt>
                <dd>{Object|Array} - 设置了 data 参数，则为 AutocJS 对象，没有为 data.anchors 数据。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleTOC = new AutocJS({
     article: '#article',
     title: 'AutocJS v0.2.0'
});

ArticleTOC.anchors() // -> data.anchors
ArticleTOC.anchors([TitleNode,..,TitleNode]); // -> AutocJS</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content list" id="list">
            <h2>list( data )</h2>
            <p><strong>list( data )</strong> 方法返回或者设置 data.list （标题 DOM 节点集合）数据。传入 data 参数，用来设置 data.list 数据，没有传入参数，则获取 data.list 数据。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Array} - （可选）标题 DOM 节点集合。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS | data.list</dt>
                <dd>{Object|Array} - 设置了 data 参数，则为 AutocJS 对象，没有为 data.list 数据。</dd>
            </dl>
            <h3>Code</h3>
            <div class="api-item">
                <div class="api-demo">
<pre class="api-code"><code>var ArticleTOC = new AutocJS({
     article: '#article',
     title: 'AutocJS v0.2.0'
});

ArticleTOC.list() // -> data.list
ArticleTOC.list([TitleNode,..,TitleNode]); // -> AutocJS</code></pre>
                </div>
            </div>
        </div>
        <div class="api-content getChapterIndex" id="getChapterIndex">
            <h2>getChapterIndex( chapter )</h2>
            <p><strong>getHeadingIndex( chapter )</strong> 方法返回某个 chapter (文章标题对应的段落章节信息）在 data.list 中对应段落层次位置索引值。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>chapter</dt>
                <dd>{Object} - 某个标题对应的 chapter 数据。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>index</dt>
                <dd>{Number} - chapter 数据在 data.list 中对应的索引值。</dd>
            </dl>
        </div>
        <div class="api-content render" id="render">
            <h2>render( )</h2>
            <p><strong>render( )</strong> 方法用来绘制 UI 界面：</p>
            <ol>
                <li>绘制文章开始出的目录导航</li>
                <li>绘制标题栏的锚点链接和标题段落索引编码</li>
                <li>绘制侧边栏的目录导航菜单</li>
            </ol>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content renderArticleDirectory" id="renderArticleDirectory">
            <h2>renderArticleDirectory( )</h2>
            <p><strong>renderArticleDirectory( )</strong> 方法用来在文章中显示段落索引导航。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content renderAnchors" id="renderAnchors">
            <h2>renderAnchors( )</h2>
            <p><strong>renderAnchors( )</strong> 方法用来绘制标题锚点链接（这个是借鉴的 AnchorsJS 的思路）和标题段落章节索引代码。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content renderHeadingChapterCode" id="renderHeadingChapterCode">
            <h2>renderHeadingChapterCode( chapter )</h2>
            <p><strong>renderHeadingChapterCode( chapter )</strong> 方法用在文章标题中绘制其对应的段落章节索引编码。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>chapter</dt>
                <dd>{Object} - 某个标题对应的 chapter 数据。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content renderSidebarDirectory" id="renderSidebarDirectory">
            <h2>renderSidebarDirectory( )</h2>
            <p><strong>renderSidebarDirectory( )</strong> 方法用来绘制完整的导航菜单。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content renderElements" id="renderElements">
            <h2>renderElements( )</h2>
            <p><strong>renderElements( )</strong> 方法用来绘制侧边栏菜单的框架。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content renderChapters" id="renderChapters">
            <h2>renderChapters( list )</h2>
            <p><strong>renderChapters( list )</strong> 方法用来绘制文章章节索引。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>list</dt>
                <dd>{HTMLElement} - 绘制索引的目标列表 DOM 节点。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content show" id="show">
            <h2>show( )</h2>
            <p><strong>show( )</strong> 方法用来展开侧边栏菜单。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content hide" id="hide">
            <h2>hide( )</h2>
            <p><strong>hide( )</strong> 方法用来收起侧边栏菜单。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - 返回 AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content toggle" id="toggle">
            <h2>toggle( )</h2>
            <p><strong>toggle( )</strong> 方法用来收起/展开侧边栏菜单。</p>
            <h3>Returns</h3>
            <dl class="params">
                <dt>AutocJS</dt>
                <dd>{AutocJS} - 返回 AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content updateLayout" id="updateLayout">
            <h2>updateLayout( )</h2>
            <p><strong>updateLayout( )</strong> 方法会根据当前窗口高度更新侧边栏菜单界面高度。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content scrollTo" id="scrollTo">
            <h2>scrollTo( top )</h2>
            <p><strong>scrollTo( top )</strong> 方法用于将窗口的滚动条滚动到指定 top 值的位置。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>top</dt>
                <dd>{Number} - 页面要滚动的 top 数值。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content destroy" id="destroy">
            <h2>destroy( )</h2>
            <p><strong>destroy( )</strong> 方法用于移除所有绘制的 DOM 节点，并移除绑定的事件处理器。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>top</dt>
                <dd>{Number} - 页面要滚动的 top 数值。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content attachEvents" id="attachEvents">
            <h2>attachEvents( )</h2>
            <p><strong>attachEvents( )</strong> 方法用于给 AutocJS 相关的所有 DOM 节点绑定事件处理器。</p>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onHeadingMouseEnter" id="onHeadingMouseEnter">
            <h2>onHeadingMouseEnter( evt )</h2>
            <p><strong>onHeadingMouseEnter( evt )</strong> 方法是文章标题节点 mouseenter 事件处理器。在鼠标滑过文章标题，显示自动创建的锚点链接。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onHeadingMouseLeave" id="onHeadingMouseLeave">
            <h2>onHeadingMouseLeave( evt )</h2>
            <p><strong>onHeadingMouseLeave( evt )</strong> 方法是文章标题节点 mouseleave 事件处理器。在鼠标离开文章标题，隐藏自动创建的锚点链接。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onArticleChapterClick" id="onArticleChapterClick">
            <h2>onArticleChapterClick( evt )</h2>
            <p><strong>onArticleChapterClick( evt )</strong> 方法是文章开始处文章导航链接的 click 事件处理器。点击链接时，滚动定位到相应的段落开始位置。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
        </div>
        <div class="api-content onSwitcherClick" id="onSwitcherClick">
            <h2>onSwitcherClick( evt )</h2>
            <p><strong>onSwitcherClick( evt )</strong> 方法是侧边栏菜单的展开/收起按钮的 click 事件处理器。点击后会根据菜单展开状态，展开或收起。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onTopClick" id="onTopClick">
            <h2>onTopClick( evt )</h2>
            <p><strong>onTopClick( evt )</strong> 方法是侧边栏菜单的返回顶部按钮菜单的 click 事件处理器。点击后会滚动到页面顶部。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onSidebarChapterClick" id="onSidebarChapterClick">
            <h2>onSidebarChapterClick( evt )</h2>
            <p><strong>onSidebarChapterClick( evt )</strong> 方法是侧边栏菜单的文章索引链接的 click 事件处理器。点击后会会滚动定位到文章相关章节标题的位置。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onOverlayClick" id="onOverlayClick">
            <h2>onOverlayClick( evt )</h2>
            <p><strong>onOverlayClick( evt )</strong> 方法是遮罩层的 click 事件处理器。点击后隐藏遮罩层，收起菜单。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content onWindowResize" id="onWindowResize">
            <h2>onWindowResize( evt )</h2>
            <p><strong>onWindowResize( evt )</strong> 方法是窗口的 resize 事件处理器。窗口大小变更后，将立即更新侧边栏高度。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>evt</dt>
                <dd>{Event} - Event 对象。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>AutocJS</dt>
                <dd>{Object} - AutocJS 对象。</dd>
            </dl>
        </div>
        <div class="api-content stripScripts" id="stripScripts">
            <h2>stripScripts( html )</h2>
            <p><strong>stripScripts( html )</strong> （静态）方法返回移除 JavaScript 代码后的字符串。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 要处理的字符串。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 处理后的字符串。</dd>
            </dl>
        </div>
        <div class="api-content encodeHTML" id="encodeHTML">
            <h2>encodeHTML( html )</h2>
            <p><strong>encodeHTML( html )</strong> （静态）方法返回将 HTML 标签代码转义成对应的实体字符串。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 要处理的字符串。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 处理后的字符串。</dd>
            </dl>
        </div>
        <div class="api-content decodeHTML" id="decodeHTML">
            <h2>decodeHTML( html )</h2>
            <p><strong>decodeHTML( html )</strong> （静态）方法返回将 HTML 实体字符串转义成对应的 HTML 标签代码。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 要处理的字符串。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 处理后的字符串。</dd>
            </dl>
        </div>
        <div class="api-content safetyHTML" id="safetyHTML">
            <h2>safetyHTML( html )</h2>
            <p><strong>safetyHTML( html )</strong> （静态）方法返回安全的 HTML 代码。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 要处理的字符串。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 处理后的字符串。</dd>
            </dl>
        </div>
        <div class="api-content template" id="template">
            <h2>template( options )</h2>
            <p><strong>template( options )</strong> （静态）方法返回用 JSON 数据中的值替换特殊字符后 HTML 模板字符串。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Object} - 模板的 JSON 对象格式数据。</dd>
            </dl>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 模板的 HTML 代码片段。</dd>
            </dl>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Object} - HTML 代码片段中特殊字符的开始标签。</dd>
            </dl>
            <dl class="api-params">
                <dt>data</dt>
                <dd>{Object} - HTML 代码片段中特殊字符的结束标签。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>html</dt>
                <dd>{String} - 处理后 HTML 模板字符串。</dd>
            </dl>
        </div>
        <div class="api-content guid" id="guid">
            <h2>guid( prefix )</h2>
            <p><strong>guid( prefix )</strong> （静态）方法返回唯一的 id。</p>
            <h3>Parameters</h3>
            <dl class="api-params">
                <dt>prefix</dt>
                <dd>{String} - 前缀字符串。</dd>
            </dl>
            <h3>Returns</h3>
            <dl class="api-params">
                <dt>id</dt>
                <dd>{String} - 唯一的 id。</dd>
            </dl>
        </div>
    </div>
</div>
<div class="api-footer">
    <p class="api-author"><span class="api-version">AutocJS</span> · Created by <a href="http://www.yaohaixiao.com/">Robert
        Yao</a></p>
    <p class="api-license">Code licensed under <a href="http://opensource.org/licenses/mit-license.html">MIT License</a> ·
        Documentation licensed under <a href="http://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a></p>
    <p class="api-issues"><a href="https://github.com/yaohaixiao/AutocJS">GitHub Project</a> · <a
            href="https://github.com/yaohaixiao/AutocJS/issues">Issues</a></p>
</div>
<script type="text/javascript" src="../asset/jquery/jquery.js"></script>
<script type="text/javascript" src="../js/autoc.js"></script>
<script type="text/javascript">
    $( '#container' ).autoc( {
        title: 'Methods'
    } );
</script>
</body>
</html>